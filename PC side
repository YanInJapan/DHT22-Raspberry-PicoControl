# -*- coding: utf-8 -*-
"""
Created on Fri Jul 25 14:14:03 2025

@author: 318-yan
"""


# This is for people who want to save DHT22 logging data to excel file and save to PC
# Connect Raspberry pico and run this code on PC
# Before running, copy the code below to Raspberry pico and save as "main.py"
# https://github.com/YanInJapan/DHT22-PicoControl/blob/main/Raspberry%20Pico%20side


import serial
from datetime import datetime
import time
import matplotlib.pyplot as plt
import pandas as pd
import tkinter as tk
import keyboard as kb
from tkinter import messagebox
import openpyxl as excel


baseGround = tk.Tk()
baseGround.geometry('600x300')
baseGround.title('Temperature Humidity Logger')
label1 = tk.Label(text='File saving route').place(x=30, y=50) #for example: C:\Users\yan\Desktop
textBox1=tk.Entry(width=50)
textBox1.place(x=30, y=90)
OptionList = ["Temperature", "Humidity"]
variable = tk.StringVar(baseGround)
variable.set(OptionList[0])
opt = tk.OptionMenu(baseGround, variable, *OptionList)
opt.config(width=10, font=("Helvetica", 9))
opt.pack(side="top")
label2 = tk.Label(text='Port (EX: COM1)').place(x=30, y=120)
textBox2 = tk.Entry(width=30)
textBox2.place(x=30, y=150)
label4 = tk.Label(text='Keep pressing Esc to finish logger').place(x=30, y=240)

MeasureTimeInterval=3 #unit= seconds, how long interval to catch data from DHT-22

Ntime=[]     
Timex=[]
Tempy=[]
humiy=[]
WaitTime=0
data_count=0
Status='on'

def finish():
    global Ntime,Timex,Tempy, humiy
    #Reset data once loggong finished
    Ntime=[]     
    Timex=[]
    Tempy=[]
    humiy=[]
    messagebox.askquestion("Info", "Logging finished")


def main():
    
    global WaitTime, Timex,Tempy,humiy,t,Ntime,StartTime,MeasureTimeInterval,Status,data_count
    
    Status='on'
    baudrate = 115200
    port=textBox2.get()
    serial_connection = serial.Serial(port, baudrate)
    StartTime = datetime.now()
    StartTime = StartTime.strftime('%D:%H:%M:%S')
    Start_time=StartTime.split(":")
    sdate=Start_time[0]
    sDate=sdate.split("/")
    sDATE=int(sDate[1])
    sh=int(Start_time[1])
    sm=int(Start_time[2])
    ss=int(Start_time[3])

    
    #Save an initial file
    savingtime=time.time()
    save_route=textBox1.get()
    title=['Real time', 'Pass time', 'Temp(C)', 'humiy %']
    df=pd.DataFrame(title).T
    df.to_excel(excel_writer=save_route+'\THlog'+str(savingtime)+'.xlsx')
    book=excel.Workbook()
    main_sheet=book.active
    main_sheet.append(title)
    fileName=save_route+'\THlog'+str(savingtime)+'.xlsx'
    book.save(save_route+'\THlog'+str(savingtime)+'.xlsx')
    
    while True:
        
        if WaitTime==0:
            baseGround.update()
            Now=datetime.now()
            Nowtime=Now.strftime('%D:%H:%M:%S')
            now_time=Nowtime.split(":")
            date=now_time[0]
            nDate=date.split("/")
            nDATE=int(nDate[1])
            nh=int(now_time[1])
            nm=int(now_time[2])
            ns=int(now_time[3])
            PassTime=(nDATE-sDATE)*24+(nh-sh)+(nm-sm)/60+(ns-ss)/3600
            Type=variable.get()
            data = serial_connection.read(11)
            
            if data == b"EOF":
                break
            
            Now=datetime.now()
            Nowtime=Now.strftime('%D:%H:%M:%S')
            now_time=Nowtime.split(":")
            date=now_time[0]
            nDate=date.split("/")
            nDATE=int(nDate[1])
            nh=int(now_time[1])
            nm=int(now_time[2])
            ns=int(now_time[3])
            PassTime=(nDATE-sDATE)*24+(nh-sh)+(nm-sm)/60+(ns-ss)/3600
            data=str(data)
            print(Nowtime+data)
            data1=data.split(" ")
            T1=''
            for a in data1[0]:
                if a.isdigit() or a=='.':
                    T1=T1+str(a)
                else:
                    pass
            H1=''
            for a in data1[1]:
                if a.isdigit() or a=='.':
                    H1=H1+str(a)
                else:
                    pass
            if T1.startswith('.'):
                break
            if H1.startswith('.'):
                break
            try:

                temperature=float(T1)
                humidity=float(H1)
                Ntime.append(Nowtime)
                humiy.append(humidity)
                Timex.append(PassTime)
                Tempy.append(temperature)
                WaitTime=MeasureTimeInterval
                data_count+=1


                
                #Save data everytime sensed
                exc_data=[Nowtime,PassTime,temperature,humidity]
                workbook = excel.load_workbook(fileName)
                sheet = workbook.active
                sheet.append(exc_data)
                workbook.save(fileName)

                #Set memory limit to save memory
                monitor_limit=100
                if data_count==monitor_limit:
                    data_count=monitor_limit-1
                    Ntime=Ntime[1:monitor_limit]
                    Timex=Timex[1:monitor_limit]
                    humiy=humiy[1:monitor_limit]
                    Tempy=Tempy[1:monitor_limit]
                    
                else: pass
            
                if Type== "Temperature":
                    try:A.remove()
                    except:
                        pass
                    if data_count!=monitor_limit-1:
                        pass
                    else:
                        plt.xlim(Timex[0],Timex[monitor_limit-2])
                        plt.ylim(Tempy[monitor_limit-2]-2.5,Tempy[monitor_limit-2]+2.5)
                    plt.xlabel("Time(hr)")
                    plt.ylabel("Temperature(C)")
                    plt.title("Temperature trend")
                    
                    A,=plt.plot(Timex, Tempy, color = "green")
                    plt.pause(0.01)
                    
                        
                    if Status=='off':
                        res = messagebox.askquestion("Info", "Logging finished")
                        break
                    else:
                        pass

                if Type== "Humidity":
                    try:
                        A.remove()
                    except:
                        pass
                    if data_count!=monitor_limit-1:
                        pass
                    else:
                        plt.xlim(Timex[0],Timex[monitor_limit-2])
                        plt.ylim(humiy[monitor_limit-2]-5,humiy[monitor_limit-2]+5)
                    
                    plt.xlabel("Time(hr)")
                    plt.ylabel("Humidity %")
                    plt.title("Humidity trend")
                    
                    
                    A,=plt.plot(Timex, humiy, color = "green")
                    plt.pause(0.01)
                        
                    if Status=='off':
                        res = messagebox.askquestion("Info", "Logging finished")
                        print("askquestion", res)
                        break
                    else:
                        pass

            except:
                print('debug-except')
                pass

        else:     
            WaitTime-=1
            time.sleep(1)
            baseGround.update()
            plt.pause(0.01)
 
            if kb.is_pressed('Esc'):
                Status='off'
                finish()
                break
  
btn1 = tk.Button(baseGround, text = 'Start',
                command=main).place(x=30, y=190)


baseGround.mainloop()
